{"version":3,"sources":["features/cell-container/StyledContainer.js","features/cell/StyledCell.js","context/game/context.js","context/game/actions.js","features/cell/Cell.js","features/cell-container/CellContainer.js","features/control-panel/StyledControlPanel.js","app/simulation.js","features/button/Button.js","features/control-panel/ControlPanel.js","features/game-board/GameBoard.js","App.js","context/createReducer.js","context/game/reducer.js","features/style-utils/reset.js","features/style-utils/variables.js","features/style-utils/GlobalStyle.js","AppProviders.js","index.js"],"names":["styled","div","INITIAL_STATE","display","isRunning","currentGeneration","NO_PROVIDER","gameData","error","Error","gameDispatch","action","type","GameContext","createContext","displayName","updateGeneration","buffer","payload","Cell","row","column","value","useContext","StyledCell","className","onClick","event","newValue","updateDiplayAt","CellContainer","StyledContainer","map","row_idx","cellValue","col_idx","key","curDisplay","currGeneration","Button","label","fn","delay","generation","simLoops","getNeighborValue","length","nextGeneration","dispatch","cell","isAlive","num_neighbors","applyRules","rtn_num","countNeighbors","console","log","JSON","stringify","start","MIN_DELAY","MAX_DELAY","col","_","push","setInterval","stop","forEach","handle","clearInterval","reset","next","ControlPanel","StyledControlPanel","GameBoard","useEffect","width","Array","fill","App","initialState","handlers","updateGame","state","newDisplay","parse","createReducer","hasOwnProperty","css","colors","createGlobalStyle","AppProviders","useReducer","GameReducer","StrictMode","Provider","GlobalStyle","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7afee230.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n// import {colors} from \"../style-utils/variables\";\r\n\r\nexport default styled.div`\r\n   display: flex;\r\n   flex-flow: row wrap;\r\n\r\n   max-height: 60rem;\r\n   max-width: 60rem;\r\n   margin-bottom: 1.7rem;\r\n   /* background-color: magenta; */\r\n`;\r\n","import styled from \"styled-components\";\r\n// import {colors} from \"../style-utils/variables\";\r\n\r\nconst alive = \"#eaea00\";\r\nconst dead = \"#353535\";\r\n\r\nexport default styled.div`\r\n   width: 2rem;\r\n   height: 2rem;\r\n   border: 1px solid darkkhaki;\r\n   /* margin: 0.1rem; */\r\n   background-color: ${dead};\r\n\r\n   &.alive {\r\n      background-color: ${alive};\r\n   }\r\n`;\r\n","import { createContext } from \"react\";\r\n\r\nexport const INITIAL_STATE = {\r\n   display: [],\r\n   isRunning: false,\r\n   currentGeneration: 0,\r\n};\r\n\r\nconst NO_PROVIDER = {\r\n   gameData: {\r\n      ...INITIAL_STATE,\r\n      error: new Error(\"You probably forgot to use a context <Provider>.\"),\r\n   },\r\n   gameDispatch: (action) => {\r\n      throw new Error(\r\n         `There was a problem dispatching ${action.type}. You probably forgot to use a context <Provider>..`\r\n      );\r\n   },\r\n};\r\n\r\nconst GameContext = createContext(NO_PROVIDER);\r\nGameContext.displayName = \"GameOfLife\";\r\n\r\nexport default GameContext;\r\n","export const INIT_GAME = \"INIT_GAME\";\r\nexport const NEXT_GENERATION = \"NEXT_GENERATION\";\r\nexport const UPDATE_DISPLAY = \"UPDATE_DISPLAY\";\r\n\r\n//== Action Creators ==//\r\nexport const initialize = (height, width) => {\r\n   const buffer = Array(height).fill(Array(width).fill(0));\r\n   return { type: INIT_GAME, payload: { buffer, currentGeneration: 0 } };\r\n};\r\n\r\nexport const updateGeneration = (buffer, currentGeneration) => {\r\n   return { type: NEXT_GENERATION, payload: { buffer, currentGeneration } };\r\n};\r\n\r\nexport const updateDiplayAt = (row, column, newValue) => {\r\n   return { type: UPDATE_DISPLAY, payload: { row, column, newValue } };\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport StyledCell from \"./StyledCell\";\r\nimport GameContext from \"../../context/game/context\";\r\nimport { updateDiplayAt } from \"../../context/game/actions\";\r\n\r\nconst Cell = ({ row, column, value }) => {\r\n   const { gameDispatch } = useContext(GameContext);\r\n   const handleClick = (event) => {\r\n      gameDispatch(updateDiplayAt(row, column, value === 1 ? 0 : 1));\r\n   };\r\n\r\n   return (\r\n      <StyledCell\r\n         className={value === 1 ? \"alive\" : \"\"}\r\n         onClick={handleClick}\r\n      ></StyledCell>\r\n   );\r\n};\r\n\r\nexport default Cell;\r\n","import React, { useContext } from \"react\";\r\nimport StyledContainer from \"./StyledContainer\";\r\nimport Cell from \"../cell/Cell\";\r\nimport GameContext from \"../../context/game/context\";\r\n\r\nconst CellContainer = () => {\r\n   const { gameData } = useContext(GameContext);\r\n\r\n   return (\r\n      <StyledContainer>\r\n         {gameData.display.map((row, row_idx) =>\r\n            row.map((cellValue, col_idx) => (\r\n               <Cell\r\n                  key={`cell-${row_idx}_${col_idx}`}\r\n                  row={row_idx}\r\n                  column={col_idx}\r\n                  value={cellValue}\r\n               />\r\n            ))\r\n         )}\r\n      </StyledContainer>\r\n   );\r\n};\r\n\r\nexport default CellContainer;\r\n","import styled from \"styled-components\";\r\n\r\nexport default styled.div`\r\n   display: flex;\r\n   flex-flow: row, nowrap;\r\n   justify-content: space-between;\r\n\r\n   width: 25rem;\r\n`;\r\n","import { updateGeneration, updateDiplayAt } from \"../context/game/actions\";\r\n\r\nconst PRESET_01 = [\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n];\r\n\r\nconst PRESET_02 = [\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n];\r\n\r\nconst PULSAR = [\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0],\r\n   [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0],\r\n   [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n];\r\nconst simLoops = []; //an array of interval handles to the sim-loop\r\nlet buffer = null; //map being worked on in current generation\r\nlet curDisplay; //a replica of the game display\r\nlet currGeneration; //generation represented by display\r\n\r\n/**\r\n * Get the current value of cell in the display at row and column:\r\n *    alive = 1\r\n *    dead = 0\r\n * If row or column are out of the bounds of the grid, assume the cell\r\n * is dead.\r\n * @param {number} row\r\n * @param {number} column\r\n */\r\nconst getNeighborValue = (row, column) => {\r\n   if (row >= 0 && row < curDisplay.length) {\r\n      if (column >= 0 && column < curDisplay[0].length) {\r\n         return curDisplay[row][column];\r\n      }\r\n   }\r\n\r\n   return 0;\r\n};\r\n\r\n/**\r\n * Counts the number of neighbors that are alive around the cell at\r\n * row and column in display.\r\n * @param {number} row\r\n * @param {number} column\r\n */\r\nconst countNeighbors = (row, column) => {\r\n   let rtn_num = 0;\r\n   rtn_num += getNeighborValue(row - 1, column - 1);\r\n   rtn_num += getNeighborValue(row - 1, column);\r\n   rtn_num += getNeighborValue(row - 1, column + 1);\r\n   rtn_num += getNeighborValue(row, column - 1);\r\n   rtn_num += getNeighborValue(row, column + 1);\r\n   rtn_num += getNeighborValue(row + 1, column - 1);\r\n   rtn_num += getNeighborValue(row + 1, column);\r\n   rtn_num += getNeighborValue(row + 1, column + 1);\r\n\r\n   return rtn_num;\r\n};\r\n\r\n/**\r\n * Applies the rules of Conway's Game of Life to the cell at row and\r\n * column in display.\r\n * @param {boolean} isAlive\r\n * @param {number} num_neighbors\r\n */\r\nconst applyRules = (isAlive, num_neighbors) => {\r\n   if (isAlive) {\r\n      if (num_neighbors < 2 || num_neighbors > 3) {\r\n         // Any live cell with fewer than two live neighbours dies, as if by underpopulation.\r\n         // Any live cell with more than three live neighbours dies, as if by overpopulation.\r\n         return 0;\r\n      }\r\n      // Any live cell with two or three live neighbours lives on to the next generation.\r\n   } else {\r\n      // Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\r\n      if (num_neighbors === 3) {\r\n         return 1;\r\n      }\r\n   }\r\n\r\n   return isAlive;\r\n};\r\n\r\n/**\r\n * Each call of this function represents one generation\r\n * @param {function} dispatch Used to update the frontend\r\n */\r\nconst nextGeneration = (dispatch) => {\r\n   //simulation calculations\r\n   //use display as data, but save changes to the buffer\r\n   //for each cell,\r\n   //    get number of neighbors\r\n   //    apply game-of-life rules\r\n   //    update cell in buffer\r\n   buffer = curDisplay.map((row, row_idx) =>\r\n      row.map((cell, col_idx) =>\r\n         applyRules(cell, countNeighbors(row_idx, col_idx))\r\n      )\r\n   );\r\n   currGeneration += 1;\r\n\r\n   //update the display with the buffer\r\n   dispatch(updateGeneration(buffer, currGeneration));\r\n   curDisplay = buffer;\r\n\r\n   console.log(`Generation: ${currGeneration}`);\r\n   console.log(JSON.stringify(buffer));\r\n};\r\n\r\n/**\r\n * Starts/resumes the simulation given some options\r\n * @param {object} gameData\r\n * @param {function} dispatch Used to update the frontend\r\n * @param {number} [delay=50] The number of miliseconds between generations\r\n */\r\nexport const start = ({ display, generation }, dispatch, delay = 50) => {\r\n   const MIN_DELAY = 100;\r\n   const MAX_DELAY = 1000;\r\n\r\n   if (delay < MIN_DELAY) {\r\n      delay = MIN_DELAY;\r\n   }\r\n\r\n   if (delay > MAX_DELAY) {\r\n      delay = MAX_DELAY;\r\n   }\r\n\r\n   currGeneration = generation;\r\n   curDisplay = display.map((row) => row.map((col) => col));\r\n   if (!buffer) {\r\n      buffer = curDisplay.map((row) => row.map((_) => 0));\r\n   }\r\n\r\n   simLoops.push(setInterval(nextGeneration, delay, dispatch));\r\n};\r\n\r\n/**\r\n * Stops the simulation\r\n */\r\nexport const stop = () => {\r\n   simLoops.forEach((handle) => clearInterval(handle));\r\n};\r\n\r\n/**\r\n *  Resets the current simulation\r\n * @param {Array} display The current generation of cells on the board\r\n * @param {function} dispatch Used to update the frontend\r\n */\r\nexport const reset = ({ display }, dispatch) => {\r\n   curDisplay = display.map((row) => row.map((col) => col));\r\n   buffer = display.map((row) => row.map((_) => 0));\r\n\r\n   currGeneration = 0;\r\n   dispatch(updateGeneration(buffer, currGeneration));\r\n};\r\n\r\n/**\r\n * Renders the next generation in simulation\r\n * @param {object} gameData\r\n * @param {function} dispatch Used to update the frontend\r\n */\r\nexport const next = ({ display, generation }, dispatch) => {\r\n   if (!display || display.length <= 0) {\r\n      console.error(\"Your grid isn't initialized!\");\r\n      return;\r\n   }\r\n\r\n   currGeneration = generation;\r\n   curDisplay = display.map((row) => row.map((col) => col));\r\n   if (!buffer) {\r\n      buffer = display.map((row) => row.map((_) => 0));\r\n   }\r\n\r\n   nextGeneration(dispatch);\r\n};\r\n\r\n// start();\r\n","import React, { useContext } from \"react\";\r\nimport GameContext from \"../../context/game/context\";\r\n\r\nconst Button = ({ label, fn, delay }) => {\r\n   const { gameData, gameDispatch } = useContext(GameContext);\r\n   const clickHandler = (event) => {\r\n      fn(\r\n         {\r\n            display: gameData.display,\r\n            generation: gameData.currentGeneration,\r\n         },\r\n         gameDispatch,\r\n         delay\r\n      );\r\n   };\r\n\r\n   return <button onClick={clickHandler}>{label}</button>;\r\n};\r\n\r\nexport default Button;\r\n\r\n/**\r\n * <button\r\n      onClick={() => {\r\n         start(\r\n            {\r\n               display: gameData.display,\r\n               generation: gameData.currentGeneration,\r\n            },\r\n            gameDispatch,\r\n            200\r\n         );\r\n      }}\r\n   >\r\n */\r\n","import React from \"react\";\r\nimport StyledControlPanel from \"./StyledControlPanel\";\r\nimport Button from \"../button/Button\";\r\nimport { start, stop, reset, next } from \"../../app/simulation\";\r\n\r\nconst ControlPanel = () => {\r\n   return (\r\n      <StyledControlPanel>\r\n         <Button label={\"Start\"} fn={start} delay={50} />\r\n         <Button label={\"Stop\"} fn={stop} />\r\n         <Button label={\"Reset\"} fn={reset} />\r\n         <Button label={\"Next\"} fn={next} />\r\n      </StyledControlPanel>\r\n   );\r\n};\r\n\r\nexport default ControlPanel;\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport CellDisplay from \"../cell-container/CellContainer\";\r\nimport ControlPanel from \"../control-panel/ControlPanel\";\r\nimport GameContext from \"../../context/game/context\";\r\n\r\nimport { initialize } from \"../../context/game/actions\";\r\n\r\nconst HEIGHT = 30;\r\nconst WIDTH = 30;\r\n\r\nconst GameBoard = () => {\r\n   const { gameData, gameDispatch } = useContext(GameContext);\r\n\r\n   useEffect(() => {\r\n      gameDispatch(initialize(HEIGHT, WIDTH));\r\n   }, []);\r\n\r\n   return (\r\n      <div className=\"game-board\">\r\n         <CellDisplay />\r\n         <div className=\"console\">\r\n            <ControlPanel />\r\n            <h1>Generation: {gameData.currentGeneration}</h1>\r\n         </div>\r\n         <div className={\"display\"}></div>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default GameBoard;\r\n","import React from \"react\";\r\nimport GameBoard from \"./features/game-board/GameBoard\";\r\nimport Cell from \"./features/cell/Cell\";\r\n\r\nfunction App() {\r\n   return (\r\n      <div className=\"app\">\r\n         <div className=\"app-title\">\r\n            <h1>The Game of Life</h1>\r\n            <p>by John Conway</p>\r\n         </div>\r\n         <GameBoard />\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default App;\r\n","export default (initialState, handlers) => {\r\n   return (state = initialState, action) => {\r\n      if (handlers.hasOwnProperty(action.type)) {\r\n         return handlers[action.type](state, action);\r\n      } else {\r\n         return state;\r\n      }\r\n   };\r\n};\r\n","import createReducer from \"../createReducer\";\r\nimport { INITIAL_STATE } from \"./context\";\r\nimport { NEXT_GENERATION, UPDATE_DISPLAY, INIT_GAME } from \"./actions\";\r\n/*** Add Reducers Here ***/\r\n\r\nconst updateGame = (state, { payload: { buffer, currentGeneration } }) => {\r\n   const newDisplay = JSON.parse(JSON.stringify(buffer));\r\n\r\n   return {\r\n      ...state,\r\n      display: newDisplay,\r\n      currentGeneration,\r\n   };\r\n};\r\n\r\nconst updateDisplay = (state, { payload: { row, column, newValue } }) => {\r\n   const newDisplay = JSON.parse(JSON.stringify(state.display));\r\n   newDisplay[row][column] = newValue;\r\n\r\n   return {\r\n      ...state,\r\n      display: newDisplay,\r\n   };\r\n};\r\n\r\nexport default createReducer(INITIAL_STATE, {\r\n   /** Handlers ***/\r\n   [INIT_GAME]: updateGame,\r\n   [NEXT_GENERATION]: updateGame,\r\n   [UPDATE_DISPLAY]: updateDisplay,\r\n});\r\n","import {css} from \"styled-components\";\r\n\r\n//*** CSS-Reset ***//\r\nexport default css`\r\n   /* http://meyerweb.com/eric/tools/css/reset/ \r\n      v2.0 | 20110126\r\n      License: none (public domain)\r\n   */\r\n\r\n   html, body, div, span, applet, object, iframe,\r\n   h1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\n   a, abbr, acronym, address, big, cite, code,\r\n   del, dfn, em, img, ins, kbd, q, s, samp,\r\n   small, strike, strong, sub, sup, tt, var,\r\n   b, u, i, center,\r\n   dl, dt, dd, ol, ul, li,\r\n   fieldset, form, label, legend,\r\n   table, caption, tbody, tfoot, thead, tr, th, td,\r\n   article, aside, canvas, details, embed, \r\n   figure, figcaption, footer, header, hgroup, \r\n   menu, nav, output, ruby, section, summary,\r\n   time, mark, audio, video {\r\n      margin: 0;\r\n      padding: 0;\r\n      border: 0;\r\n      font-size: 100%;\r\n      font: inherit;\r\n      vertical-align: baseline;\r\n   }\r\n   /* HTML5 display-role reset for older browsers */\r\n   article, aside, details, figcaption, figure, \r\n   footer, header, hgroup, menu, nav, section {\r\n      display: block;\r\n   }\r\n   body {\r\n      line-height: 1;\r\n   }\r\n   ol, ul {\r\n      list-style: none;\r\n   }\r\n   blockquote, q {\r\n      quotes: none;\r\n   }\r\n   blockquote:before, blockquote:after,\r\n   q:before, q:after {\r\n      content: '';\r\n      content: none;\r\n   }\r\n   table {\r\n      border-collapse: collapse;\r\n      border-spacing: 0;\r\n   }\r\n`;","//*** Constants ***/\r\nexport const MAX_WIDTH = \"1040px\";\r\nexport const MIN_WIDTH = \"660px\";\r\n\r\n//*** Fonts ***//\r\nexport const headerFont = `'Oswald', Sans-Serif`;\r\nexport const bodyFont = `'Quattrocento', Serif`;\r\n\r\n//*** Named Colors ***//\r\nconst bodyColor = \"#999999\";\r\n\r\nexport const colors = {\r\n   bodyColor,\r\n};\r\n","import { createGlobalStyle } from \"styled-components\";\r\nimport reset from \"./reset\";\r\nimport {\r\n   headerFont,\r\n   bodyFont,\r\n   colors,\r\n   MIN_WIDTH,\r\n   MAX_WIDTH,\r\n} from \"./variables\";\r\n\r\nexport default createGlobalStyle`\r\n   ${reset}\r\n\r\n   * {\r\n      box-sizing: border-box;\r\n   }\r\n\r\n   html {\r\n      font-size: 62.5%;\r\n   }\r\n\r\n   body {\r\n      height: 100%;\r\n      margin: 0;\r\n      background-color: ${colors.bodyColor};\r\n   }\r\n\r\n   h1, h2, h3, h4, h5 {\r\n      font-family: ${headerFont};\r\n      font-weight: bold;\r\n   }\r\n\r\n   h1 {\r\n      font-size: 3.0rem;\r\n   }\r\n\r\n   h2 {\r\n      font-size: 2.25rem;\r\n   }\r\n\r\n   h3 {\r\n      font-size: 1.755rem;\r\n   }\r\n\r\n   h4 {\r\n      font-size: 1.5rem;\r\n   }\r\n\r\n   h5 {\r\n      font-size: 1.245rem;\r\n   }\r\n\r\n   p, h6 {\r\n      font-family: ${bodyFont};\r\n   }\r\n\r\n   h6 {\r\n      font-size: 1rem;\r\n   }\r\n\r\n   p {\r\n      font-size: 1.6rem;\r\n   }\r\n\r\n   .app {\r\n      margin: 0 auto;\r\n      min-width: ${MIN_WIDTH};\r\n      max-width: ${MAX_WIDTH};\r\n      padding: 2rem;\r\n\r\n      .app-title {\r\n         width: 18.5rem;\r\n         padding: 1.5rem 0;\r\n\r\n         p {\r\n            text-align: right;\r\n         }\r\n      }\r\n\r\n      .console {\r\n         display: flex;\r\n         flex-flow: row nowrap;\r\n         justify-content: space-between;\r\n         align-items: flex-end;\r\n\r\n         width: 60rem;\r\n      }\r\n   }\r\n`;\r\n","import React, { useReducer } from \"react\";\r\nimport App from \"./App\";\r\nimport GameContext, { INITIAL_STATE } from \"./context/game/context\";\r\nimport GameReducer from \"./context/game/reducer\";\r\nimport GlobalStyle from \"./features/style-utils/GlobalStyle\";\r\n\r\nconst AppProviders = () => {\r\n   const [gameData, gameDispatch] = useReducer(GameReducer, INITIAL_STATE);\r\n\r\n   return (\r\n      <React.StrictMode>\r\n         <GameContext.Provider value={{ gameData, gameDispatch }}>\r\n            <GlobalStyle />\r\n            <App />\r\n         </GameContext.Provider>\r\n      </React.StrictMode>\r\n   );\r\n};\r\n\r\nexport default AppProviders;\r\n","import React, { useReducer } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport AppProviders from \"./AppProviders\";\r\n\r\nReactDOM.render(<AppProviders />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}